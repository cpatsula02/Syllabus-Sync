import logging
import os
from typing import List, Dict, Any
import re
from openai import OpenAI

# Configure OpenAI with API key
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
openai = OpenAI(api_key=OPENAI_API_KEY)

# the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
# do not change this unless explicitly requested by the user
MODEL = "gpt-4o"

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def analyze_checklist_item(item: str, document_text: str) -> Dict[str, Any]:
    """
    Analyze if a checklist item is present in the document using semantic understanding.

    This function acts as a university academic reviewer, focusing on whether the 
    requirement described in the checklist item is meaningfully fulfilled in the 
    course outline.

    The analysis considers that the same concept may be expressed with different phrasing, 
    formatting, or section titles, and uses deep understanding of intent and meaning to
    determine whether the course outline addresses the requirement.

    Returns a dictionary with match result and confidence score.
    """
    # Use document_processor's specialized functions to get a more accurate result
    from document_processor import check_item_in_document, find_matching_excerpt

    # First check using the advanced semantic matching in check_item_in_document
    is_present = check_item_in_document(item, document_text)

    # If the item is present, try to find the specific section that matches it
    evidence = ""
    if is_present:
        found, excerpt = find_matching_excerpt(item, document_text)
        if found and excerpt:
            evidence = excerpt

    # Generate a meaningful explanation
    item_lower = item.lower()
    if is_present:
        # Create context-aware explanations
        if 'objective' in item_lower and ('list' in item_lower or 'number' in item_lower):
            explanation = 'The course outline contains clearly listed or numbered learning objectives.'
        elif 'grade' in item_lower or 'grading' in item_lower or 'weighting' in item_lower:
            explanation = 'The course outline includes a grade distribution or assessment weighting scheme.'
        elif 'exam' in item_lower and 'final' in item_lower:
            explanation = 'Information about the final exam is provided in the course outline.'
        elif 'policy' in item_lower and 'late' in item_lower:
            explanation = 'The course outline specifies a policy for late assignments or submissions.'
        elif 'miss' in item_lower and ('exam' in item_lower or 'assignment' in item_lower):
            explanation = 'The course outline addresses procedures for missed assessments or exams.'
        elif 'instructor' in item_lower and 'contact' in item_lower:
            explanation = 'The course outline provides instructor contact information and communication procedures.'
        elif 'text' in item_lower and 'book' in item_lower:
            explanation = 'The course outline lists required or recommended textbooks or reading materials.'
        elif 'academic' in item_lower and ('integrity' in item_lower or 'misconduct' in item_lower):
            explanation = 'The course outline includes a statement on academic integrity or misconduct.'
        elif 'accommodation' in item_lower or 'accessibility' in item_lower:
            explanation = 'The course outline provides information about accommodations for students with disabilities.'
        else:
            explanation = 'This requirement is addressed in the course outline with relevant content.'
    else:
        if 'objective' in item_lower and ('list' in item_lower or 'number' in item_lower):
            explanation = 'The course outline does not appear to have clearly listed or numbered learning objectives.'
        elif 'grade' in item_lower or 'grading' in item_lower or 'weighting' in item_lower:
            explanation = 'A grade distribution or assessment weighting scheme was not found in the course outline.'
        elif 'exam' in item_lower and 'final' in item_lower:
            explanation = 'Specific information about the final exam appears to be missing from the course outline.'
        elif 'policy' in item_lower and 'late' in item_lower:
            explanation = 'A clear policy for late assignments or submissions was not found in the course outline.'
        elif 'miss' in item_lower and ('exam' in item_lower or 'assignment' in item_lower):
            explanation = 'Procedures for missed assessments or exams were not clearly identified in the course outline.'
        elif 'instructor' in item_lower and 'contact' in item_lower:
            explanation = 'Instructor contact information or communication procedures appear to be missing from the course outline.'
        elif 'text' in item_lower and 'book' in item_lower:
            explanation = 'Required or recommended textbooks or reading materials were not clearly identified in the course outline.'
        elif 'academic' in item_lower and ('integrity' in item_lower or 'misconduct' in item_lower):
            explanation = 'A statement on academic integrity or misconduct was not found in the course outline.'
        elif 'accommodation' in item_lower or 'accessibility' in item_lower:
            explanation = 'Information about accommodations for students with disabilities appears to be missing from the course outline.'
        else:
            explanation = 'This requirement does not appear to be addressed in the course outline.'

    return {
        'present': is_present,
        'confidence': 0.85 if is_present else 0.15,
        'explanation': explanation,
        'evidence': evidence if is_present else "",
        'method': 'academic_review'
    }

def ai_analyze_item(item: str, document_text: str, additional_context: str = "") -> Dict[str, Any]:
    """
    Use OpenAI to analyze if a checklist item is present in the document.

    This function provides advanced semantic understanding of whether
    the requirement in the checklist item is fulfilled in the course outline.
    
    Special handling is provided for grade table items which need more precise analysis.
    
    Args:
        item: The checklist item to analyze
        document_text: The full text of the document to check against
        additional_context: Optional context provided by the user about the course
        
    Returns:
        Dictionary with analysis results including presence, confidence and evidence
    """
    try:
        # Limit document text length to avoid exceeding token limits
        max_doc_length = 6000
        document_excerpt = document_text[:max_doc_length]
        if len(document_text) > max_doc_length:
            document_excerpt += "..."
        
        # Determine if this is a special item type for customized prompting
        item_lower = item.lower()
        
        # Check for grade/assessment related items
        is_grade_item = any(term in item_lower for term in [
            'grade distribution', 'weight', 'assessment', 'table',
            'due date', 'participation', 'group project', 'final exam',
            'take home', 'class schedule', 'missed assessment', 'late policy',
            'assignment', 'evaluation', 'worth', 'percentage', 'grading'
        ])
        
        # Check for policy-related items
        is_policy_item = any(term in item_lower for term in [
            'policy', 'policies', 'missed', 'late', 'academic integrity',
            'misconduct', 'plagiarism', 'attendance', 'accommodations',
            'diversity', 'inclusion', 'accessibility', 'guidelines', 'rules'
        ])
        
        # Check for instructor/contact related items
        is_instructor_item = any(term in item_lower for term in [
            'instructor', 'professor', 'faculty', 'contact', 'email',
            'office hours', 'communication', 'availability'
        ])
        
        # Choose the appropriate specialized prompt based on item type
        if is_grade_item:
            prompt = f"""
            As a University of Calgary academic course outline reviewer, analyze if the following checklist item 
            related to GRADE DISTRIBUTION or ASSESSMENT POLICIES is addressed in the course outline.
            
            This item requires precise identification of specific details or tables in the document.
            
            CHECKLIST ITEM: "{item}"
            
            COURSE OUTLINE TEXT: {document_excerpt}
            
            {f'ADDITIONAL CONTEXT: {additional_context}' if additional_context else ''}
            
            IMPORTANT GUIDELINES FOR ASSESSMENT/GRADE ITEMS:
            1. Grade Distribution Tables or weighted assessments MUST include:
               - Clear assessment component names (e.g., assignments, exams, projects)
               - Explicit weights/percentages for each component
               - Components should add up to 100% (or close to it)
            
            2. Missed Assessment Policies MUST have:
               - Clear procedures for missed assessments
               - Specific requirements for documentation or legitimate excuses
               - Explicit consequences or alternatives
            
            3. Late Policies MUST include:
               - Specific penalties or procedures for late submissions
               - Clear guidelines on how late work is handled
               - Any exceptions to the policy
            
            4. Class Participation details MUST include:
               - Specific explanation of how participation is measured
               - Clear expectations for student participation
               - Weight or importance in the final grade
            
            5. Exams (final, midterm, take-home) MUST include:
               - Specific format details (in-person, online, take-home)
               - Duration information
               - Content scope or coverage
            
            BE EXTREMELY STRICT IN YOUR EVALUATION. If the document doesn't EXPLICITLY and CLEARLY address 
            ALL the specified requirements with sufficient detail, mark as NOT PRESENT.
            
            When analyzing if the requirement is present, focus only on EXPLICIT statements rather than
            implied or inferred information. If you're unsure, mark it as not present.
            
            Provide a JSON response with the following fields:
            - "present": boolean indicating if the item is EXPLICITLY addressed in the outline with SUFFICIENT DETAIL
            - "confidence": number between 0 and 1 indicating confidence in the decision (higher = more confident)
            - "explanation": detailed explanation of why the item is or is not present
            - "evidence": if present, provide the EXACT TEXT from the outline that addresses this item
            - "method": should be "ai_grade_analysis"
            """
        elif is_policy_item:
            prompt = f"""
            As a University of Calgary academic course outline reviewer, analyze if the following checklist item 
            related to ACADEMIC POLICIES is adequately addressed in the course outline.
            
            This requires identification of specific policy details in the document.
            
            CHECKLIST ITEM: "{item}"
            
            COURSE OUTLINE TEXT: {document_excerpt}
            
            {f'ADDITIONAL CONTEXT: {additional_context}' if additional_context else ''}
            
            IMPORTANT GUIDELINES FOR POLICY ITEMS:
            1. Policy statements MUST be:
               - Clearly labeled (with specific headings or sections)
               - Explicitly stated (not implied)
               - Detailed enough to understand procedures and consequences
            
            2. Academic Integrity policies MUST include:
               - Clear definition of academic misconduct
               - Specific consequences for violations
               - Reference to university standards or procedures
            
            3. Late/Missed Work policies MUST include:
               - Specific procedures for students
               - Clear consequences or penalties
               - Any documentation requirements
            
            4. Accommodation policies MUST include:
               - Clear processes for requesting accommodations
               - Specific types of accommodations available
               - References to relevant university services
            
            BE EXTREMELY STRICT IN YOUR EVALUATION. If the document doesn't EXPLICITLY and CLEARLY address 
            the policy requirements with sufficient detail, mark as NOT PRESENT.
            
            When analyzing if the requirement is present, focus only on EXPLICIT statements rather than
            implied or inferred information. If you're unsure, mark it as not present.
            
            Provide a JSON response with the following fields:
            - "present": boolean indicating if the item is EXPLICITLY addressed in the outline with SUFFICIENT DETAIL
            - "confidence": number between 0 and 1 indicating confidence in the decision (higher = more confident)
            - "explanation": detailed explanation of why the item is or is not present
            - "evidence": if present, provide the EXACT TEXT from the outline that addresses this item
            - "method": should be "ai_policy_analysis"
            """
        elif is_instructor_item:
            prompt = f"""
            As a University of Calgary academic course outline reviewer, analyze if the following checklist item 
            related to INSTRUCTOR INFORMATION is adequately addressed in the course outline.
            
            This requires identification of specific instructor contact details in the document.
            
            CHECKLIST ITEM: "{item}"
            
            COURSE OUTLINE TEXT: {document_excerpt}
            
            {f'ADDITIONAL CONTEXT: {additional_context}' if additional_context else ''}
            
            IMPORTANT GUIDELINES FOR INSTRUCTOR INFORMATION ITEMS:
            1. Instructor contact information MUST include:
               - Instructor's name
               - University email address (especially @ucalgary.ca addresses)
               - Office location or virtual contact methods
            
            2. Office hours information MUST include:
               - Specific times when instructor is available
               - Location or method for meetings (in-person, virtual)
               - Any procedures for scheduling meetings
            
            3. Communication policies MUST include:
               - Expected response times
               - Preferred contact methods
               - Any specific communication guidelines
            
            BE EXTREMELY STRICT IN YOUR EVALUATION. If the document doesn't EXPLICITLY include 
            the required instructor information with sufficient detail, mark as NOT PRESENT.
            
            Pay special attention to email addresses ending with @ucalgary.ca which are required.
            
            When analyzing if the requirement is present, focus only on EXPLICIT statements rather than
            implied or inferred information. If you're unsure, mark it as not present.
            
            Provide a JSON response with the following fields:
            - "present": boolean indicating if the item is EXPLICITLY addressed in the outline with SUFFICIENT DETAIL
            - "confidence": number between 0 and 1 indicating confidence in the decision (higher = more confident)
            - "explanation": detailed explanation of why the item is or is not present
            - "evidence": if present, provide the EXACT TEXT from the outline that addresses this item
            - "method": should be "ai_instructor_analysis"
            """
        else:
            # Standard prompt for general items
            prompt = f"""
            As a University of Calgary academic course outline reviewer, analyze if the following checklist item 
            is adequately addressed in the course outline.
            
            CHECKLIST ITEM: "{item}"
            
            COURSE OUTLINE TEXT: {document_excerpt}
            
            {f'ADDITIONAL CONTEXT: {additional_context}' if additional_context else ''}
            
            IMPORTANT GUIDELINES:
            1. The requirement must be EXPLICITLY addressed in the document
            2. Similar phrasing or formatting is acceptable, but the core meaning must be present
            3. The information must be detailed enough to fulfill the requirement
            4. Be strict in your evaluation - if you're unsure, mark it as not present
            
            When analyzing if the requirement is present, focus only on EXPLICIT statements rather than
            implied or inferred information. If you're unsure, mark it as not present.
            
            Provide a JSON response with the following fields:
            - "present": boolean indicating if the item is EXPLICITLY addressed in the outline with SUFFICIENT DETAIL
            - "confidence": number between 0 and 1 indicating confidence in the decision (higher = more confident)
            - "explanation": detailed explanation of why the item is or is not present
            - "evidence": if present, provide the EXACT TEXT from the outline that addresses this item
            - "method": should be "ai_general_analysis"
            """

        # Adjust temperature and tokens based on item type
        # Lower temperature for stricter, more consistent responses
        temperature = 0.1
        
        # Use more tokens for complex items
        max_tokens = 1000 if is_grade_item or is_policy_item else 800
        
        # Make the API call
        response = openai.chat.completions.create(
            model=MODEL,
            messages=[
                {"role": "system", "content": "You are an expert academic document reviewer for the University of Calgary with extremely high standards for document compliance."},
                {"role": "user", "content": prompt}
            ],
            response_format={"type": "json_object"},
            temperature=temperature,
            max_tokens=max_tokens
        )

        # Parse the JSON response
        result = eval(response.choices[0].message.content)

        # Ensure all required fields are present
        if not all(key in result for key in ["present", "confidence", "explanation", "evidence", "method"]):
            raise ValueError("API response missing required fields")
            
        # Post-processing validation
        evidence = result.get("evidence", "").lower()
        
        # Additional validation for grade items
        if is_grade_item and result.get("present", False):
            # Check for actual percentages/weights in evidence
            has_percentages = '%' in evidence
            has_weights = 'weight' in evidence or any(re.search(r'\b\d+\s*%', evidence) for _ in range(1))
            
            if not (has_percentages or has_weights) and ('grade' in item_lower or 'distribution' in item_lower or 'weight' in item_lower):
                # Lower confidence if percentages/weights are missing
                result["confidence"] = max(0.2, result["confidence"] - 0.4)
                result["explanation"] += " [Warning: Evidence may lack explicit grade weights]"
                
                # If confidence drops too low, mark as not present
                if result["confidence"] < 0.5:
                    result["present"] = False
                    result["explanation"] = "Although some related content was found, the evidence lacks explicit grade weights or percentages required for this item."
                
        # Additional validation for policy items
        elif is_policy_item and result.get("present", False):
            policy_terms = ['policy', 'policies', 'guideline', 'procedure', 'rule']
            has_policy_term = any(term in evidence for term in policy_terms)
            
            if not has_policy_term:
                # Lower confidence if policy terms are missing
                result["confidence"] = max(0.2, result["confidence"] - 0.3)
                result["explanation"] += " [Warning: Evidence may lack explicit policy statements]"
                
        # Additional validation for instructor items
        elif is_instructor_item and result.get("present", False):
            if 'email' in item_lower and '@ucalgary.ca' not in evidence:
                # Lower confidence if ucalgary.ca email is missing
                result["confidence"] = max(0.2, result["confidence"] - 0.5)
                result["explanation"] += " [Warning: Evidence does not contain a @ucalgary.ca email address]"
                
                # If confidence drops too low, mark as not present
                if result["confidence"] < 0.4:
                    result["present"] = False
                    result["explanation"] = "Although some instructor information was found, it lacks a required @ucalgary.ca email address."

        # Highlight matching terms in the evidence
        if result.get("present", False) and result.get("evidence", ""):
            # Extract key terms from the checklist item
            key_terms = [word.lower() for word in re.findall(r'\b\w{4,}\b', item_lower)]
            
            # Add highlighting to the evidence
            highlighted_evidence = result["evidence"]
            for term in key_terms:
                if len(term) > 3:  # Only highlight meaningful words
                    pattern = re.compile(r'\b' + re.escape(term) + r'\b', re.IGNORECASE)
                    highlighted_evidence = pattern.sub(f"<span style='background-color: #c2f0c2;'>{term}</span>", highlighted_evidence)
            
            result["evidence"] = highlighted_evidence

        return result
    except Exception as e:
        logger.error(f"Error using AI analysis: {str(e)}")
        if "insufficient_quota" in str(e):
            logger.warning("API quota exceeded - using enhanced traditional analysis")
        
        # Fall back to enhanced traditional analysis with multiple checks
        from document_processor import check_item_in_document, find_matching_excerpt, check_special_entity_patterns, identify_grade_distribution_table
        
        # Get the item_lower value for the fallback process
        item_lower = item.lower()
        
        # Multiple validation approaches
        is_present_basic = check_item_in_document(item, document_text, additional_context)
        is_present_special = check_special_entity_patterns(item, document_text, additional_context)
        
        # Special handling for grade table items
        is_grade_item = ('grade' in item_lower and 'distribution' in item_lower) or 'weight' in item_lower
        if is_grade_item:
            has_grade_table, _ = identify_grade_distribution_table(document_text)
            if has_grade_table:
                is_present_special = True
        
        # Find matching excerpt
        found_excerpt, excerpt = find_matching_excerpt(item, document_text)
        
        # Require at least 2 out of 3 checks to pass for higher confidence
        checks_passed = sum([is_present_basic, is_present_special, found_excerpt])
        is_present = checks_passed >= 2
        confidence = min(0.85, 0.3 + (checks_passed * 0.2))
        
        return {
            'present': is_present,
            'confidence': confidence if is_present else 0.2,
            'explanation': f"Fallback analysis after API error: {'Item is present in document' if is_present else 'Item not found in document'} ({checks_passed}/3 checks passed)",
            'evidence': excerpt if found_excerpt else "",
            'method': 'fallback_academic_review'
        }
    except Exception as e:
        logger.error(f"Error using AI analysis: {str(e)}")
        if "insufficient_quota" in str(e):
            logger.warning("API quota exceeded - using enhanced traditional analysis")
        # Fall back to enhanced traditional analysis with multiple checks
        from document_processor import check_item_in_document, find_matching_excerpt, check_special_entity_patterns
        
        # Multiple validation approaches
        is_present_basic = check_item_in_document(item, document_text)
        is_present_special = check_special_entity_patterns(item, document_text)
        found_excerpt, _ = find_matching_excerpt(item, document_text)
        
        # Require at least 2 out of 3 checks to pass for higher confidence
        is_present = sum([is_present_basic, is_present_special, found_excerpt]) >= 2
        evidence = ""
        if is_present:
            found, excerpt = find_matching_excerpt(item, document_text)
            if found and excerpt:
                evidence = excerpt

        return {
            'present': is_present,
            'confidence': 0.85 if is_present else 0.15,
            'explanation': f"Fallback analysis after AI error: {'Item is present in document' if is_present else 'Item not found in document'}",
            'evidence': evidence,
            'method': 'fallback_academic_review'
        }

def analyze_checklist_items_batch(items: List[str], document_text: str, max_attempts: int = 3, additional_context: str = "") -> Dict[str, Dict[str, Any]]:
    """
    Process each checklist item using our semantic understanding approach,
    with optional AI-powered analysis for better results.

    This function acts as a university academic reviewer, focusing on whether each requirement 
    described in the checklist items is meaningfully fulfilled in the course outline.

    The analysis considers that the same concept may be expressed with different phrasing, 
    formatting, or section titles, and uses deep understanding of intent and meaning to
    determine whether the course outline addresses each requirement.

    Args:
        items: List of checklist items to analyze
        document_text: The full text of the document to check against
        max_attempts: Maximum number of API analysis attempts
        additional_context: Optional context provided by the user about the course

    Returns:
        A dictionary mapping each item to its analysis result
    """
    results = {}
    ai_calls_made = 0

    # Decide whether to use AI analysis based on max_attempts
    use_ai = max_attempts > 0 and OPENAI_API_KEY is not None

    if use_ai:
        logger.info(f'Analyzing {len(items)} checklist items with AI-powered semantic understanding')
    else:
        logger.info(f'Analyzing {len(items)} checklist items with traditional semantic understanding')

    # Process all items with AI when available
    for i, item in enumerate(items):
        item_id = f'Item #{i+1}'
        logger.info(f'Processing {item_id}: {item[:50]}{"..." if len(item) > 50 else ""}')

        # Attempt AI analysis if within max attempts
        if use_ai and ai_calls_made < max_attempts:
            try:
                result = ai_analyze_item(item, document_text, additional_context)
                ai_calls_made += 1
                results[item] = result
                continue
            except Exception as e:
                logger.error(f"Error in AI analysis for {item_id}: {str(e)}")
                # Fall back to traditional analysis if AI fails

        # Use the traditional analyzer for remaining items
        result = analyze_checklist_item(item, document_text)
        results[item] = result

    return results